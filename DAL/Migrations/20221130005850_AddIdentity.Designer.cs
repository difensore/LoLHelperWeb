// <auto-generated />
using System;
using LoLHelper.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(LolHelperContext))]
    [Migration("20221130005850_AddIdentity")]
    partial class AddIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LoLHelper.Models.Champ", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("E")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Passive")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Q")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("R")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("W")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Champ", (string)null);
                });

            modelBuilder.Entity("LoLHelper.Models.Contr", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Champ")
                        .HasColumnType("int");

                    b.Property<int>("Contr1")
                        .HasColumnType("int")
                        .HasColumnName("Contr1");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Champ");

                    b.HasIndex("Contr1");

                    b.ToTable("Contr", (string)null);
                });

            modelBuilder.Entity("LoLHelper.Models.ExtraRune", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExtraRunes");
                });

            modelBuilder.Entity("LoLHelper.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Item", (string)null);
                });

            modelBuilder.Entity("LoLHelper.Models.MainRune", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MainRunes");
                });

            modelBuilder.Entity("LoLHelper.Models.Pick", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Champ")
                        .HasColumnType("int");

                    b.Property<int>("FirstMainItem")
                        .HasColumnType("int");

                    b.Property<int>("FirstSpell")
                        .HasColumnType("int");

                    b.Property<int>("FirstStartedItem")
                        .HasColumnType("int");

                    b.Property<int>("FivthMainItem")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int>("RunesBuild")
                        .HasColumnType("int");

                    b.Property<int>("SecondMainItem")
                        .HasColumnType("int");

                    b.Property<int>("SecondSpell")
                        .HasColumnType("int");

                    b.Property<int>("SecondStartedItem")
                        .HasColumnType("int");

                    b.Property<int>("ThirdMainItem")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdStartedItem")
                        .HasColumnType("int");

                    b.Property<int?>("UserBuild")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Champ");

                    b.HasIndex("FirstMainItem");

                    b.HasIndex("FirstSpell");

                    b.HasIndex("FirstStartedItem");

                    b.HasIndex("RunesBuild");

                    b.HasIndex("SecondMainItem");

                    b.HasIndex("SecondSpell");

                    b.HasIndex("SecondStartedItem");

                    b.HasIndex("ThirdMainItem");

                    b.HasIndex("ThirdStartedItem");

                    b.ToTable("Pick", (string)null);
                });

            modelBuilder.Entity("LoLHelper.Models.Rune", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int>("MainRune")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainRune");

                    b.ToTable("Runes");
                });

            modelBuilder.Entity("LoLHelper.Models.RunesBuild", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("FirstExtraRune")
                        .HasColumnType("int");

                    b.Property<int>("FirstRune")
                        .HasColumnType("int");

                    b.Property<int>("FirstRuneS")
                        .HasColumnType("int");

                    b.Property<int>("FourthRune")
                        .HasColumnType("int");

                    b.Property<int>("MainrRune")
                        .HasColumnType("int");

                    b.Property<int>("SecondExtraRune")
                        .HasColumnType("int");

                    b.Property<int>("SecondMainRune")
                        .HasColumnType("int");

                    b.Property<int>("SecondRune")
                        .HasColumnType("int");

                    b.Property<int>("SecondRuneS")
                        .HasColumnType("int");

                    b.Property<int>("ThirdExtraRune")
                        .HasColumnType("int");

                    b.Property<int>("ThirdRune")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstExtraRune");

                    b.HasIndex("FirstRune");

                    b.HasIndex("FirstRuneS");

                    b.HasIndex("FourthRune");

                    b.HasIndex("MainrRune");

                    b.HasIndex("SecondExtraRune");

                    b.HasIndex("SecondMainRune");

                    b.HasIndex("SecondRune");

                    b.HasIndex("SecondRuneS");

                    b.HasIndex("ThirdExtraRune");

                    b.HasIndex("ThirdRune");

                    b.ToTable("RunesBuild", (string)null);
                });

            modelBuilder.Entity("LoLHelper.Models.Spell", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Cooldown")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Spell", (string)null);
                });

            modelBuilder.Entity("LoLHelper.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LoLHelper.Models.UsersBuild", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BuildId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BuildId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersBuilds");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LoLHelper.Models.Contr", b =>
                {
                    b.HasOne("LoLHelper.Models.Champ", "ChampNavigation")
                        .WithMany("Contrs")
                        .HasForeignKey("Champ")
                        .IsRequired()
                        .HasConstraintName("FK_Contr_Champ");

                    b.HasOne("LoLHelper.Models.Pick", "Contr1Navigation")
                        .WithMany("Contrs")
                        .HasForeignKey("Contr1")
                        .IsRequired()
                        .HasConstraintName("FK_Contr_Pick");

                    b.Navigation("ChampNavigation");

                    b.Navigation("Contr1Navigation");
                });

            modelBuilder.Entity("LoLHelper.Models.Pick", b =>
                {
                    b.HasOne("LoLHelper.Models.Champ", "ChampNavigation")
                        .WithMany("Picks")
                        .HasForeignKey("Champ")
                        .IsRequired()
                        .HasConstraintName("FK_Pick_Champ");

                    b.HasOne("LoLHelper.Models.Item", "FirstMainItemNavigation")
                        .WithMany("PickFirstMainItemNavigations")
                        .HasForeignKey("FirstMainItem")
                        .IsRequired()
                        .HasConstraintName("FK_Pick_Item3");

                    b.HasOne("LoLHelper.Models.Spell", "FirstSpellNavigation")
                        .WithMany("PickFirstSpellNavigations")
                        .HasForeignKey("FirstSpell")
                        .IsRequired()
                        .HasConstraintName("FK_Pick_Spell1");

                    b.HasOne("LoLHelper.Models.Item", "FirstStartedItemNavigation")
                        .WithMany("PickFirstStartedItemNavigations")
                        .HasForeignKey("FirstStartedItem")
                        .IsRequired()
                        .HasConstraintName("FK_Pick_Item");

                    b.HasOne("LoLHelper.Models.RunesBuild", "RunesBuildNavigation")
                        .WithMany("Picks")
                        .HasForeignKey("RunesBuild")
                        .IsRequired()
                        .HasConstraintName("FK_Pick_RunesBuild");

                    b.HasOne("LoLHelper.Models.Item", "SecondMainItemNavigation")
                        .WithMany("PickSecondMainItemNavigations")
                        .HasForeignKey("SecondMainItem")
                        .IsRequired()
                        .HasConstraintName("FK_Pick_Item4");

                    b.HasOne("LoLHelper.Models.Spell", "SecondSpellNavigation")
                        .WithMany("PickSecondSpellNavigations")
                        .HasForeignKey("SecondSpell")
                        .IsRequired()
                        .HasConstraintName("FK_Pick_Spell");

                    b.HasOne("LoLHelper.Models.Item", "SecondStartedItemNavigation")
                        .WithMany("PickSecondStartedItemNavigations")
                        .HasForeignKey("SecondStartedItem")
                        .IsRequired()
                        .HasConstraintName("FK_Pick_Item1");

                    b.HasOne("LoLHelper.Models.Item", "ThirdMainItemNavigation")
                        .WithMany("PickThirdMainItemNavigations")
                        .HasForeignKey("ThirdMainItem")
                        .IsRequired()
                        .HasConstraintName("FK_Pick_Item5");

                    b.HasOne("LoLHelper.Models.Item", "ThirdStartedItemNavigation")
                        .WithMany("PickThirdStartedItemNavigations")
                        .HasForeignKey("ThirdStartedItem")
                        .HasConstraintName("FK_Pick_Item2");

                    b.Navigation("ChampNavigation");

                    b.Navigation("FirstMainItemNavigation");

                    b.Navigation("FirstSpellNavigation");

                    b.Navigation("FirstStartedItemNavigation");

                    b.Navigation("RunesBuildNavigation");

                    b.Navigation("SecondMainItemNavigation");

                    b.Navigation("SecondSpellNavigation");

                    b.Navigation("SecondStartedItemNavigation");

                    b.Navigation("ThirdMainItemNavigation");

                    b.Navigation("ThirdStartedItemNavigation");
                });

            modelBuilder.Entity("LoLHelper.Models.Rune", b =>
                {
                    b.HasOne("LoLHelper.Models.MainRune", "MainRuneNavigation")
                        .WithMany("Runes")
                        .HasForeignKey("MainRune")
                        .IsRequired()
                        .HasConstraintName("FK_Runes_MainRunes");

                    b.Navigation("MainRuneNavigation");
                });

            modelBuilder.Entity("LoLHelper.Models.RunesBuild", b =>
                {
                    b.HasOne("LoLHelper.Models.ExtraRune", "FirstExtraRuneNavigation")
                        .WithMany("RunesBuildFirstExtraRuneNavigations")
                        .HasForeignKey("FirstExtraRune")
                        .IsRequired()
                        .HasConstraintName("FK_RunesBuild_ExtraRunes");

                    b.HasOne("LoLHelper.Models.Rune", "FirstRuneNavigation")
                        .WithMany("RunesBuildFirstRuneNavigations")
                        .HasForeignKey("FirstRune")
                        .IsRequired()
                        .HasConstraintName("FK_RunesBuild_Runes");

                    b.HasOne("LoLHelper.Models.Rune", "FirstRuneSNavigation")
                        .WithMany("RunesBuildFirstRuneSNavigations")
                        .HasForeignKey("FirstRuneS")
                        .IsRequired()
                        .HasConstraintName("FK_RunesBuild_Runes4");

                    b.HasOne("LoLHelper.Models.Rune", "FourthRuneNavigation")
                        .WithMany("RunesBuildFourthRuneNavigations")
                        .HasForeignKey("FourthRune")
                        .IsRequired()
                        .HasConstraintName("FK_RunesBuild_Runes3");

                    b.HasOne("LoLHelper.Models.MainRune", "MainrRuneNavigation")
                        .WithMany("RunesBuildMainrRuneNavigations")
                        .HasForeignKey("MainrRune")
                        .IsRequired()
                        .HasConstraintName("FK_RunesBuild_MainRunes");

                    b.HasOne("LoLHelper.Models.ExtraRune", "SecondExtraRuneNavigation")
                        .WithMany("RunesBuildSecondExtraRuneNavigations")
                        .HasForeignKey("SecondExtraRune")
                        .IsRequired()
                        .HasConstraintName("FK_RunesBuild_ExtraRunes1");

                    b.HasOne("LoLHelper.Models.MainRune", "SecondMainRuneNavigation")
                        .WithMany("RunesBuildSecondMainRuneNavigations")
                        .HasForeignKey("SecondMainRune")
                        .IsRequired()
                        .HasConstraintName("FK_RunesBuild_MainRunes1");

                    b.HasOne("LoLHelper.Models.Rune", "SecondRuneNavigation")
                        .WithMany("RunesBuildSecondRuneNavigations")
                        .HasForeignKey("SecondRune")
                        .IsRequired()
                        .HasConstraintName("FK_RunesBuild_Runes1");

                    b.HasOne("LoLHelper.Models.Rune", "SecondRuneSNavigation")
                        .WithMany("RunesBuildSecondRuneSNavigations")
                        .HasForeignKey("SecondRuneS")
                        .IsRequired()
                        .HasConstraintName("FK_RunesBuild_Runes5");

                    b.HasOne("LoLHelper.Models.ExtraRune", "ThirdExtraRuneNavigation")
                        .WithMany("RunesBuildThirdExtraRuneNavigations")
                        .HasForeignKey("ThirdExtraRune")
                        .IsRequired()
                        .HasConstraintName("FK_RunesBuild_ExtraRunes2");

                    b.HasOne("LoLHelper.Models.Rune", "ThirdRuneNavigation")
                        .WithMany("RunesBuildThirdRuneNavigations")
                        .HasForeignKey("ThirdRune")
                        .IsRequired()
                        .HasConstraintName("FK_RunesBuild_Runes2");

                    b.Navigation("FirstExtraRuneNavigation");

                    b.Navigation("FirstRuneNavigation");

                    b.Navigation("FirstRuneSNavigation");

                    b.Navigation("FourthRuneNavigation");

                    b.Navigation("MainrRuneNavigation");

                    b.Navigation("SecondExtraRuneNavigation");

                    b.Navigation("SecondMainRuneNavigation");

                    b.Navigation("SecondRuneNavigation");

                    b.Navigation("SecondRuneSNavigation");

                    b.Navigation("ThirdExtraRuneNavigation");

                    b.Navigation("ThirdRuneNavigation");
                });

            modelBuilder.Entity("LoLHelper.Models.UsersBuild", b =>
                {
                    b.HasOne("LoLHelper.Models.Pick", "Build")
                        .WithMany("UsersBuilds")
                        .HasForeignKey("BuildId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersBuilds_Pick");

                    b.HasOne("LoLHelper.Models.User", "User")
                        .WithMany("UsersBuilds")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersBuilds_Users");

                    b.Navigation("Build");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoLHelper.Models.Champ", b =>
                {
                    b.Navigation("Contrs");

                    b.Navigation("Picks");
                });

            modelBuilder.Entity("LoLHelper.Models.ExtraRune", b =>
                {
                    b.Navigation("RunesBuildFirstExtraRuneNavigations");

                    b.Navigation("RunesBuildSecondExtraRuneNavigations");

                    b.Navigation("RunesBuildThirdExtraRuneNavigations");
                });

            modelBuilder.Entity("LoLHelper.Models.Item", b =>
                {
                    b.Navigation("PickFirstMainItemNavigations");

                    b.Navigation("PickFirstStartedItemNavigations");

                    b.Navigation("PickSecondMainItemNavigations");

                    b.Navigation("PickSecondStartedItemNavigations");

                    b.Navigation("PickThirdMainItemNavigations");

                    b.Navigation("PickThirdStartedItemNavigations");
                });

            modelBuilder.Entity("LoLHelper.Models.MainRune", b =>
                {
                    b.Navigation("Runes");

                    b.Navigation("RunesBuildMainrRuneNavigations");

                    b.Navigation("RunesBuildSecondMainRuneNavigations");
                });

            modelBuilder.Entity("LoLHelper.Models.Pick", b =>
                {
                    b.Navigation("Contrs");

                    b.Navigation("UsersBuilds");
                });

            modelBuilder.Entity("LoLHelper.Models.Rune", b =>
                {
                    b.Navigation("RunesBuildFirstRuneNavigations");

                    b.Navigation("RunesBuildFirstRuneSNavigations");

                    b.Navigation("RunesBuildFourthRuneNavigations");

                    b.Navigation("RunesBuildSecondRuneNavigations");

                    b.Navigation("RunesBuildSecondRuneSNavigations");

                    b.Navigation("RunesBuildThirdRuneNavigations");
                });

            modelBuilder.Entity("LoLHelper.Models.RunesBuild", b =>
                {
                    b.Navigation("Picks");
                });

            modelBuilder.Entity("LoLHelper.Models.Spell", b =>
                {
                    b.Navigation("PickFirstSpellNavigations");

                    b.Navigation("PickSecondSpellNavigations");
                });

            modelBuilder.Entity("LoLHelper.Models.User", b =>
                {
                    b.Navigation("UsersBuilds");
                });
#pragma warning restore 612, 618
        }
    }
}
